diff --git a/src/common/env.cpp b/src/common/env.cpp
index 54a58c9fd..1f9c870bb 100644
--- a/src/common/env.cpp
+++ b/src/common/env.cpp
@@ -109,7 +109,7 @@ void configure(const std::wstring& filename)
         }
 
         ftemplate =
-            clean_path(boost::filesystem::complete(paths.get(L"template-path", initial + L"/template/")).wstring());
+            clean_path(boost::filesystem::absolute(paths.get(L"template-path", initial + L"/template/")).wstring());
         data = clean_path(paths.get(L"data-path", initial + L"/data/"));
     } catch (...) {
         CASPAR_LOG(error) << L" ### Invalid configuration file. ###";
diff --git a/src/common/os/linux/filesystem.cpp b/src/common/os/linux/filesystem.cpp
index 835114889..d0f63fbab 100644
--- a/src/common/os/linux/filesystem.cpp
+++ b/src/common/os/linux/filesystem.cpp
@@ -51,7 +51,7 @@ std::optional<std::wstring> find_case_insensitive(const std::wstring& case_insen
             bool found = false;
 
             for (auto it = directory_iterator(absolute(result)); it != directory_iterator(); ++it) {
-                auto leaf = it->path().leaf();
+                auto leaf = it->path().filename();
 
                 if (boost::algorithm::iequals(part.wstring(), leaf.wstring(), loc)) {
                     result = result / leaf;
diff --git a/src/common/stdafx.h b/src/common/stdafx.h
index 050907c45..767a2f717 100644
--- a/src/common/stdafx.h
+++ b/src/common/stdafx.h
@@ -33,7 +33,6 @@
 #include <boost/date_time/posix_time/posix_time.hpp>
 #include <boost/exception/all.hpp>
 #include <boost/filesystem.hpp>
-#include <boost/filesystem/convenience.hpp>
 #include <boost/filesystem/fstream.hpp>
 #include <boost/filesystem/operations.hpp>
 #include <boost/filesystem/path.hpp>
diff --git a/src/modules/ffmpeg/consumer/ffmpeg_consumer.cpp b/src/modules/ffmpeg/consumer/ffmpeg_consumer.cpp
index 1e38d3d4d..c6cc9fba9 100644
--- a/src/modules/ffmpeg/consumer/ffmpeg_consumer.cpp
+++ b/src/modules/ffmpeg/consumer/ffmpeg_consumer.cpp
@@ -543,7 +543,7 @@ struct ffmpeg_consumer : public core::frame_consumer
 
                 static boost::regex prot_exp("^.+:.*");
                 if (!boost::regex_match(path_, prot_exp)) {
-                    if (!full_path.is_complete()) {
+                    if (!full_path.is_absolute()) {
                         full_path = u8(env::media_folder()) + path_;
                     }
 
